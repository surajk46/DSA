package revisionDynamicStack;

import java.util.Scanner;


class MyStackException extends RuntimeException
{
	String msg;

	public MyStackException(String msg) {
		super();
		this.msg = msg;
	}
	
	public String getMessage()
	{
		return msg;
	}
}

class Node {
	private int data;
	private Node next;
	
	public Node() {
		super();
	}
	public Node(int data) {
		super();
		this.data = data;
		this.next = null;
	}
	
	
	public int getData() {
		return data;
	}
	public void setData(int data) {
		this.data = data;
	}
	public Node getNext() {
		return next;
	}
	public void setNext(Node next) {
		this.next = next;
	}
	@Override
	public String toString() {
		return "Node data=" + data;
	}

	
	
	
}

class Demo {
	Node top;
	public Demo()
	{
		top=null;
	}
	
	public void push(int data)
	{
		Node record=new Node(data);
		if(top==null) {
			top=record;
		}
		else {
			record.setNext(top);
			top=record;
		}
	}
	public int pop() {
		int ele=-9999;
		if(top==null) {
			throw new MyStackException("----------------------Stack is Empty--------------------------");
		}
		else {
			ele=top.getData();
			top=top.getNext();
		}	
		return ele;
	}
	public void display() {
		System.out.println("---------------------------------------------------------------");
		Node move=top;
		while(move!=null)
		{
			System.out.println(move.getData());
			move=move.getNext();
		}
		System.out.println("---------------------------------------------------------------");
	}
}
public class Demo
{
	public static void main(String[] args) {
		Demo s=new Demo();
		Scanner scanner=new Scanner(System.in);
		int choice=0;
		do {
			System.out.println("1 : push");
			System.out.println("2 : Pop");
			System.out.println("3 : Display");
			System.out.println("1 : push");
			System.out.print("Enter your choice : ");
			choice=scanner.nextInt();
			switch(choice)
			{
			case 1:
				System.out.print("Enter Element To add : ");
				int data =scanner.nextInt();
				try {
					s.push(data);
				}
				catch(MyStackException e)
				{
					System.out.println(e.getMessage());
				}
				
				break;
			case 2:
				try {
					System.out.println("Deleted data is : "+s.pop());
				}
				catch(MyStackException e)
				{
					System.out.println(e.getMessage());
				}
				
				break;
			case 3:
				try {
					s.display();
				}
				catch(MyStackException e)
				{
					System.out.println(e.getMessage());
				}
				
				break;
			case 4:
				break;
			}
		} while (choice!=0);
		scanner.close();
	}
}